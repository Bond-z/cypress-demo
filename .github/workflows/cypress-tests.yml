name: Cypress Tests on Comment

on:
  issue_comment:
    types: [created]

jobs:
  run-cypress-tests:
    if: github.event.issue.pull_request != null && (
          contains(github.event.comment.body, '/run-smoke') ||
          contains(github.event.comment.body, '/run-regression')
        )
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Notify user
        uses: actions/github-script@v6
        with:
          script: |
            const commentBody = context.payload.comment.body;

            // Determine which test is being run
            let testType = '';
            if (commentBody.includes('/run-smoke')) {
              testType = 'smoke';
            } else if (commentBody.includes('/run-regression')) {
              testType = 'regression';
            }

            // Post a comment notifying the user
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üöÄ I'm running the ${testType} tests now...`
            });

      - name: Post Test Results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            // Access context directly without re-declaring it
            const fs = require('fs');

            // Read Cypress test results from output (update the path as per your setup)
            const testResults = fs.existsSync('cypress/results/output.txt')
              ? fs.readFileSync('cypress/results/output.txt', 'utf8')
              : 'No test results found.';

            // Post the test results as a comment on the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üìù Here are the test results:\n\n\`\`\`\n${testResults}\n\`\`\``
            });
